#include <LiquidCrystal.h>

const int startPin = 3;
const int stopPin = 2;
const int signalPin = A0;

LiquidCrystal lcd(4, 5, 6, 7, 8, 9);

unsigned long tiempoInicio = 0;
unsigned long tiempoMaximoCaptura = 13000; // 10 segundos en milisegundos


bool capturaActiva = false;


const int filas = 220;
int** matriz;
int indice = 0;


int picos = 0;
int valles = 0;
int transicionesBruscas = 0;
float pendienteAnterior = 0.0;
float umbralPendiente = 0.1;
float amplitud = 0;
float frecuencia = 0;
float fase = 0;


void iniciarCaptura();
void capturarDatos();
void finalizarCaptura();

void liberacion();
void tiposenal(int &tipoSenal1);
void analisis_senal(int tipoSenal, float &amplitud, float &frecuencia, float &fase);

void setup() {
    pinMode(startPin, INPUT);
    pinMode(stopPin, INPUT);
    lcd.begin(16, 2);
    Serial.begin(9600);

    lcd.setCursor(0, 0);
    lcd.print("Inicio programa");

    
    matriz = new int*[filas];
    for (int i = 0; i < filas; i++) {
        matriz[i] = new int[2];  
    }
}

void loop() {
    
    if (digitalRead(startPin) == HIGH && !capturaActiva) {
        iniciarCaptura();
    }

    
    if (capturaActiva) {
        if (millis() - tiempoInicio < tiempoMaximoCaptura) {
            capturarDatos();
        } else {
            finalizarCaptura();
        }
        if (digitalRead(stopPin) == HIGH) {
            finalizarCaptura();
        }
    }
}
void iniciarCaptura() {
    capturaActiva = true;
    tiempoInicio = millis(); 
    indice = 0; 
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Inicio de captura de datos");
    Serial.println("Inicio captura");
}
void finalizarCaptura() {
    capturaActiva = false;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Captura finalizada");
    Serial.println("Finalizando captura de datos...");

    
    int tipoSenal1 =0;
    tiposenal(tipoSenal1);

    if (tipoSenal1 == 4) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Senal desconocida");
        Serial.println("Senal desconocida.");
    } else {
        analisis_senal(tipoSenal1, amplitud, frecuencia, fase);
        if (tipoSenal1==1){
            Serial.print("Tipo de senal: ");
            Serial.println("senoidal");
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Senal: ");
            lcd.print("senoidal");
            delay(2000);
        }
        else if (tipoSenal1==2){
            Serial.print("Tipo de senal: ");
            Serial.println("triangular");
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Senal: ");
            lcd.print("triangular");
            delay(2000);
        }
        else if (tipoSenal1==3){
            Serial.print("Tipo de senal: ");
            Serial.println("cuadrada");
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Senal: ");
            lcd.print("cuadrada");
            delay(2000);
        }
        Serial.print("Frecuencia: ");
        Serial.print(frecuencia);
        Serial.println(" Hz");
        Serial.print("Amplitud: ");
        Serial.print(amplitud);
        Serial.println(" V");
        Serial.print("Fase: ");
        Serial.print(fase);
        Serial.println(" s");
        
        lcd.setCursor(0, 1);
        String info = "F: " + String(frecuencia) + " Hz A: " + String(amplitud) + " V Fase: " + String(fase) + " s";
        lcd.print(info);
        for (int i = 0; i < info.length(); i++) {
            lcd.scrollDisplayLeft();
            delay(300);
        }
    }
    liberacion();
}
void analisis_senal(int tipoSenal, float &amplitud, float &frecuencia, float &fase) {
    int valorMax = matriz[0][1];
    int valorMin = matriz[0][1];
    unsigned long tiempoMax = 0;
    unsigned long tiempoAnteriorPico = 0;
    bool primerPico = true;

    
    for (int i = 0; i < indice; i++) {
        if (matriz[i][1] > valorMax) {
            valorMax = matriz[i][1];
            tiempoMax = matriz[i][0];  
        }
        if (matriz[i][1] < valorMin) {
            valorMin = matriz[i][1];
        }

        if (tipoSenal == 1 || tipoSenal == 2) {
            if (i > 0 && matriz[i - 1][1] < matriz[i][1] && matriz[i][1] > matriz[i + 1][1]) {
                if (primerPico) {
                    tiempoAnteriorPico = matriz[i][0];
                    primerPico = false;
                } else {
                    frecuencia = 1000.0 / (matriz[i][0] - tiempoAnteriorPico);  
                    tiempoAnteriorPico = matriz[i][0];
                }
            }
        }
    }


    if (tipoSenal == 1 || tipoSenal == 2) {
        amplitud = (valorMax - valorMin) / 2.0;
    } else if (tipoSenal == 3) {
        amplitud = valorMax - valorMin;
    }

    if (tipoSenal == 1) {
        fase = (float)(tiempoMax - matriz[0][0]) / 1000.0; 
    } else {
        fase = 0;
    }
}

